/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.proyecto1grafos;

import org.graphstream.graph.*;
import org.graphstream.graph.implementations.*;

/**
 * Clase que representa la interfaz gráfica de usuario para la aplicación de gestión de la red de transporte.
 * Permite cargar redes de transporte, visualizar el grafo y realizar diversas operaciones sobre la red.
 */
public class Interfaz extends javax.swing.JFrame {
    App app = new App();

    /**
     * Clase que representa la interfaz gráfica de usuario para la aplicación de gestión de la red de transporte.
     * Permite cargar redes de transporte, visualizar el grafo y realizar diversas operaciones sobre la red.
     */
    public Interfaz() {
        initComponents();
        button_exit.setVisible(false);
        button_select_file.setVisible(false);
        button_select_red.setVisible(false);
        comboBoxCiudades.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_bienvenida = new javax.swing.JTextField();
        button_add_red = new javax.swing.JButton();
        button_exit = new javax.swing.JButton();
        button_mostrar_red = new javax.swing.JButton();
        button_select_file = new javax.swing.JButton();
        button_select_red = new javax.swing.JButton();
        comboBoxCiudades = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        text_bienvenida.setText("Manejo de Sucursales");
        text_bienvenida.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_bienvenidaActionPerformed(evt);
            }
        });
        getContentPane().add(text_bienvenida, new org.netbeans.lib.awtextra.AbsoluteConstraints(249, 6, -1, 71));

        button_add_red.setText("Añadir Red");
        button_add_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_add_redActionPerformed(evt);
            }
        });
        getContentPane().add(button_add_red, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 290, 91));

        button_exit.setText("Salir");
        button_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exitActionPerformed(evt);
            }
        });
        getContentPane().add(button_exit, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 506, -1, -1));

        button_mostrar_red.setText("Mostrar Red");
        button_mostrar_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_mostrar_redActionPerformed(evt);
            }
        });
        getContentPane().add(button_mostrar_red, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 290, 91));

        button_select_file.setText("Seleccionar Archivo");
        button_select_file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_select_fileActionPerformed(evt);
            }
        });
        getContentPane().add(button_select_file, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 290, 92));

        button_select_red.setText("Seleccionar Red");
        button_select_red.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_select_redActionPerformed(evt);
            }
        });
        getContentPane().add(button_select_red, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 110, 290, 90));

        comboBoxCiudades.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboBoxCiudades.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxCiudadesActionPerformed(evt);
            }
        });
        getContentPane().add(comboBoxCiudades, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 210, 210, 40));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void text_bienvenidaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_bienvenidaActionPerformed

    }//GEN-LAST:event_text_bienvenidaActionPerformed

    private void button_add_redActionPerformed(java.awt.event.ActionEvent evt) {                                               
        button_mostrar_red.setVisible(false); 
        button_add_red.setVisible(false); 
        button_exit.setVisible(true);
        button_select_file.setVisible(true);

    }

    private void button_mostrar_redActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_mostrar_redActionPerformed
        button_mostrar_red.setVisible(false); 
        button_add_red.setVisible(false); 
        button_exit.setVisible(true);
        button_select_red.setVisible(true);
    }//GEN-LAST:event_button_mostrar_redActionPerformed

    private void button_select_fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_select_fileActionPerformed
        LectorArchivo lectorArchivo = new LectorArchivo();
        javax.swing.JFileChooser fileChooser = new javax.swing.JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == javax.swing.JFileChooser.APPROVE_OPTION) {
            java.io.File selectedFile = fileChooser.getSelectedFile();
            try {
                app = lectorArchivo.leerArchivo(selectedFile.getAbsolutePath(), app);
            } catch (java.io.IOException ex) {
                System.out.println("Error al leer el archivo");
            }
        }
    }//GEN-LAST:event_button_select_fileActionPerformed

    private void comboBoxCiudadesActionPerformed(java.awt.event.ActionEvent evt) {
        String ciudadSeleccionada = (String) comboBoxCiudades.getSelectedItem();
        System.out.println("Ciudad seleccionada: " + ciudadSeleccionada);
        NodoDeListas current = app.getcFirst();
        while (current != null) {
            Ciudad ciudad = (Ciudad) current.getDataCiudad();
            if (ciudad.getNombre().equals(ciudadSeleccionada)) {
                ciudad.getGrafo().imprimirGrafo();
                Graph graph = new SingleGraph(ciudadSeleccionada);
                System.setProperty("org.graphstream.ui.renderer", "org.graphstream.ui.j2dviewer.J2DGraphRenderer");

                for (int i = 0; i < ciudad.getGrafo().numVertices; i++) {
                    try {
                        ListaAdyacentes lista = ciudad.getGrafo().listaAdy[i];
                        Parada parada = lista.getVertice();
                        String nombreParada = parada.getNombre();
                        if (nombreParada.contains(":")) {
                            String[] parts = nombreParada.split(":");
                            String nombre1 = parts[0].trim();
                            String nombre2 = parts[1].trim();
                            if (graph.getNode(nombre1) == null) {
                                Node node1 = graph.addNode(nombre1);
                                node1.setAttribute("ui.label", nombre1);
                            }
                            if (graph.getNode(nombre2) == null) {
                                Node node2 = graph.addNode(nombre2);
                                node2.setAttribute("ui.label", nombre2);
                            }
                        } else {
                            if (graph.getNode(nombreParada) == null) {
                                Node node = graph.addNode(nombreParada);
                                node.setAttribute("ui.label", nombreParada);
                            }
                        }
                    } catch (Exception e) {
                        System.out.println(e);
                    }

                }
                for (int i = 0; i < ciudad.getGrafo().numVertices; i++) {
                    ListaAdyacentes lista = ciudad.getGrafo().listaAdy[i];
                    Parada parada = lista.getVertice();
                    NodoDeListas currentAdyacente = lista.getpFirst();
                    while (currentAdyacente != null) {
                        Parada adyacente = (Parada) currentAdyacente.getDataParada();
                        String nombreParada = parada.getNombre();
                        String nombreAdyacente = adyacente.getNombre();
                        if (nombreParada.contains(":")) {
                            nombreParada = nombreParada.split(":")[0].trim();
                        }
                        if (nombreAdyacente.contains(":")) {
                            nombreAdyacente = nombreAdyacente.split(":")[0].trim();
                        }
                        String edgeId = nombreParada + " - " + nombreAdyacente;
                        try {
                            if (graph.getEdge(edgeId) == null) {
                                graph.addEdge(edgeId, nombreParada, nombreAdyacente);
                            } else {
                                ListaAdyacentes listaExistente = ciudad.getGrafo().getListaAdyacentes(nombreParada);
                                if (!listaExistente.equals(lista)) {
                                    NodoDeListas currentAdyacenteExistente = listaExistente.getpFirst();
                                    while (currentAdyacenteExistente != null) {
                                        Parada adyacenteExistente = (Parada) currentAdyacenteExistente.getDataParada();
                                        String nombreAdyacenteExistente = adyacenteExistente.getNombre();
                                        if (nombreAdyacenteExistente.contains(":")) {
                                            nombreAdyacenteExistente = nombreAdyacenteExistente.split(":")[0].trim();
                                        }
                                        String edgeIdExistente = nombreParada + " - " + nombreAdyacenteExistente;
                                        if (graph.getEdge(edgeIdExistente) == null) {
                                            graph.addEdge(edgeIdExistente, nombreParada, nombreAdyacenteExistente);
                                        }
                                        currentAdyacenteExistente = currentAdyacenteExistente.getpNext();
                                    }
                                }
                            }
                        } catch (Exception e) {
                            System.out.println(e);
                        }
                        currentAdyacente = currentAdyacente.getpNext();
                    }
                }
                graph.display();
                break;
            }
            current = current.getpNext();
        }
    }

    private void button_select_redActionPerformed(java.awt.event.ActionEvent evt) {
        comboBoxCiudades.removeAllItems();
        NodoDeListas current = app.getcFirst();
        while (current != null) {
            Ciudad ciudad = (Ciudad) current.getDataCiudad();
            comboBoxCiudades.addItem(ciudad.getNombre());
            current = current.getpNext();
            System.out.println(ciudad.getNombre());
        }
        comboBoxCiudades.setVisible(true);
    }

    private void button_exitActionPerformed(java.awt.event.ActionEvent evt) {                                            
        button_mostrar_red.setVisible(true);
        button_add_red.setVisible(true);
        button_select_file.setVisible(false);
        button_select_red.setVisible(false);
        button_exit.setVisible(false);
        comboBoxCiudades.setVisible(false);
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interfaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interfaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_add_red;
    private javax.swing.JButton button_exit;
    private javax.swing.JButton button_mostrar_red;
    private javax.swing.JButton button_select_file;
    private javax.swing.JButton button_select_red;
    private javax.swing.JComboBox<String> comboBoxCiudades;
    private javax.swing.JTextField text_bienvenida;
    // End of variables declaration//GEN-END:variables
}
